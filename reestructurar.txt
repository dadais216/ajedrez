



%%% memoria
Hay 4 memorias: movimiento, pieza, tile y global

La de movimiento se entiende como local, las otras 3 globales.

La local se guarda en cada normalHolder para poder restaurarla cuando se recalcula. 

Las operaciones de lectura se hacen durante el chequeo de condiciones, mientras que las de escritura se hacen solo si es sobre memoria local. 
Las escrituras sobre memoria global son acciones

mcpm
mset
madd

reciben dos numeros, cada uno con un identificador de donde vienen

l - local
p - pieza
t - tile
g - global

se puede acceder a la posicion actual del puntero / numero de turno poniendo px,py,t


desliz mset gl0 1 madd l0 1 mless l0 5 end
setear las globales desde 0 hasta 4 en 1, pisando los triggers de cada una

desliz mcmp gl0 1 madd l0 1 mless l0 5 end mcmp l0 5
verdadero si las globales 0-4 son 1, pone un trigger en cada una

en estos casos los indirectos hacen lo mismo que los directos, nomas que ponen/pisan en la posicion que obtengan del otro
los triggers indirectos no son como los permanentes, se ponen dinamicamente y se sacan cuando se pisan (o no?). Si ya esta puesto no se vuelve a poner, pero se hace el intento





desliz mset gg0 1 madd g0 1 mless g0 5 end
deberia andar igual que el de local

desliz mcmp gg0 0 madd g0 1 mless g0 5 end mcmp g0 5
pone 2 triggers permanentes en g0
dinamicamente pone triggers en g0-4
el madd no activa triggers por ser de la misma pieza
como la memoria es global no se guarda el estado de cada iteracion, y el trigger va a dispararse en la primera iteracion del desliz (porque la memoria va a ser igual en cada iteracion), lo que es raro pero esta bien definido. Se tiene que usar memoria local para estas cosas







tiempos
base -O3
actual 100 turnos                         - 0.000021   0.000017   0.000017  0.000022
caballos caballos sin captura 1000 turnos - 0.000038   0.000056   0.000059
caballos reinas sin captura 1000 turnos   - 0.000251   0.000262   0.000281
caballos emperador sin captura 5 turnos   - 0.226628
caballos memoria 1000 turnos              - 0.000349   0.000377   0.000412
caballos memoria sin turno 2000 turnos    - 0.000020   0.000013   0.000014

poniendo un trigger por normal por posicion -O3
+no pone mas de un trigger por normal por posicion
+los trigger son de 8 bits
-cuando recalcula tiene que rehacer todas las condiciones 

mas rapido cuando hay normales con pocas condiciones

actual 100 turnos                         - 15    20    18   21
caballos caballos sin captura 1000 turnos - 39    39    58
caballos reinas sin captura 1000 turnos   - 251   262   281
caballos emperador sin captura 5 turnos   - 226628
caballos memoria 1000 turnos              - 349   377   412
caballos memoria sin turno 2000 turnos    - 20    13    14
test vel reina                            - 178   154   229
test vel reina con boludeces              - 337   244   340
caballos peon 2000 turnos                 - 13    17    24   19   15   20

haciendo que los triggers contengan cond que los puso -O3
+recalcula solo las conds necesarias
-triggers de 12 bits
-stable_sort
-pone un trigger por cada cond que pone triggers

mas rapido cuando hay normales con muchas condiciones

actual 100 turnos                         - 19    15  22  19
caballos caballos sin captura 1000 turnos - 57    46  51
caballos reinas sin captura 1000 turnos   - 354   242 246
caballos emperador sin captura 5 turnos   - 195875
caballos memoria 1000 turnos              crash
caballos memoria sin turno 2000 turnos    crash
test vel reina                            - 167   167  169
test vel reina con boludeces              - 473   524  388
caballos peon 2000 turnos                 - 17    19   20


La diferencia en la mayoria de los casos no es muy significativa
Me voy a quedar con la version que no pone mas informacion al trigger. Es un codigo mas simple, y parece ser ligeramente mas rapida en el caso mas general (normales con pocas condiciones). Tambien tiene espacio a optimizar, una de las optimizaciones mas recurrentes del otro metodo es saltarse el esp al recalcular, y eso es algo que se podría harcodear.


poniendo un trigger por normal por posicion -O3
actual 100 turnos                         - 15    20    18   21
caballos caballos sin captura 1000 turnos - 54    52    52
caballos reinas sin captura 1000 turnos   - 251   262   281
caballos emperador sin captura 5 turnos   - 226628
caballos memoria 1000 turnos              - 349   377   412
caballos memoria sin turno 2000 turnos    - 20    13    14
test vel reina                            - 178   154   229
test vel reina con boludeces              - 347   310   340
caballos peon 2000 turnos                 - 13    17    24   19   15   20

Otra cosa que se podría probar es poner una normal por posicion -O3
+un trigger por normal
+no recalcula innecesariamente (a menos que se trate de cosas de memoria)
+al haber solo un esp (o ninguno) por normal y forzar que este al principio se puede devirtualizar
-puede que tener muchas normales sea mas lento (aunque en el caso general siempre hay una normal por posicion)

actual 100 turnos                         - 16    18    17   21  12  16
caballos caballos sin captura 1000 turnos - 39    56    56
caballos reinas sin captura 1000 turnos   - 240   228   170
caballos emperador sin captura 5 turnos   - 227063
caballos memoria 1000 turnos              - 
caballos memoria sin turno 2000 turnos    - 
test vel reina                            - 148   135   139
test vel reina con boludeces              - 464   403   461
caballos peon 2000 turnos                 - 20    14    16   18   16   13

la reina con boludeces es mas lenta porque tiene un normal-esp exc normal, normal end, donde el trigger lo pone normal-esp. En el otro el trigger lo pone cada normal adentro de exc, por lo que hay que hacer manejo de listas de triggers y eso
Esto es medio problematico porque cosas como exc mover or capturar end son comunes. Pero bueno, creo que optimizar lo vale. Cosas muy repetidas se pueden poner adentro de una accion nueva. No va a ser un problema para la version compilada (esta puede poner la activacion del trigger donde quiera, no esta limitado a principios de normales)

haciendo que se salte esp en la regeneracion, y haciendo que solo esp ponga triggers

actual 100 turnos                         - 11    13   12   12  12  15 22 15 13
caballos caballos sin captura 1000 turnos - 52    39    42
caballos reinas sin captura 1000 turnos   - 245   310   310
caballos emperador sin captura 5 turnos   - 261658
caballos memoria 1000 turnos              - 
caballos memoria sin turno 2000 turnos    - 
test vel reina                            - 140   140   97 210 136
test vel reina con boludeces              - 235   257   335
caballos peon 2000 turnos                 - 20    20    17   14   19   14

Cuando se regenera la normal que puso un trigger no es necesario chequear esp porque esta asegurado que va a ser verdadero. No se puede decir lo mismo de lo que venga despues.
Se podría hacer otra version de generar sin esp o setear temporalmente esp a false. Habria que ver si lo vale

Cuando una normalHolder no varia su valor de verdad no es necesario seguir recalculando, ya que los otros operadores van a hacer lo mismo que hicieron la vez anterior. Para tener esto en cuenta hay que hacer otra version de generar que haga el chequeo de variacion y meta un longjmp si falla. 
Cuando hay varios triggers el sistema es mas complicado, solo hace el longjmp si es el ultimo trigger, sino funciona como generar
Despues de pensarlo un poco no creo que valga la pena. Agrega muchos chequeos para un caso muy raro. Lo peor seria que generara de mas, y eso pasaria especialmente en una generacion redundante de verdadero->verdadero. Y eso no va a pasar practicamente nunca.
Lo otro es una generacion de falso->falso,que no hace nada dentro de la misma cadena, pero puede que haga que un operador que contenga la cadena haga cosas de mas. Pero ese operador podria tener chequeos que lo eviten (si desliz y exc no hacen nada que no llamen a sig->generar())
A demas agregar algo asi implica que la normal que puso el trigger es la que tiene la condicion que necesita ser reevaluada, lo que es falso cuando hago w esp exc mover or capturar end y pongo el trigger solo en esp (que seria lo mas rapido, porque levanta un trigger solo)


Tambien aprovechando que cada normal tiene su pos saco la pos de cada cond, ahora hay una posActual que es offset+normal->pos directamente
Esto evita la suma en cada cond y acc, y ahorra memoria. Ahora la mayoria de las cond y acc no tienen algo que las haga unicas, asi que no necesito memoria dinamica.

(mejora en 1 o 2 microsegundos despues de hacer eso)




Aplicando memoria contigua

actual 100 turnos                         - 17    12   12   15  13  15 20 16 14
caballos caballos sin captura 1000 turnos - 47    45    48  31
caballos reinas sin captura 1000 turnos   - 255   142   194
caballos emperador sin captura 5 turnos   - 185508
caballos memoria 1000 turnos              - 
caballos memoria sin turno 2000 turnos    - 
test vel reina 1000                       - 115   82    115 113 114
test vel reina con boludeces 1000         - 237   253   255         
caballos peon 2000 turnos                 - 18    19    15   16   19   13

tamaños
normal 112
movs   143168
ops    34832

base puntero
actual 100 turnos                         - 14    16   19   17  15  13 13 13 12
caballos peon 2000 turnos                 - 19    20    14   19   16   19 13
test vel reina 1000                       - 135   116    115 97 113
normal 96
movs   126528
ops    34832
#parece ser que es ligeramente mas lento (o no?). Lo voy a dejar estar porque ahorra memoria y eso va a ser importante ahora que voy a empezar a copiar pedazos importantes durante el runtime. Ademas la memoria va a ser cada vez mas chica, y la realentizacion que esto tiene va a bajar con eso.


stuffed bools
actual 100 turnos                         - 16    16   16   18  13  12 15 13 14
caballos peon 2000 turnos                 - 20    20    19   19   13   18 15
test vel reina 1000                       - 100   128    181 179 80 79 116
normal 80
movs   107968
ops    33376
#noto que hay mas variacion entre corridas, si se mira nomas los minimos ahora es mas rapido que antes


checks de kamikase y spawns fuera de la linea principal, clickers aplanados
actual 100 turnos                         - 12    12   13   16  15  15 11 12 12
caballos peon 2000 turnos                 - 13    14    10   12   14   14 14
test vel reina 1000                       - 111   115    113 117 88 78 157
normal 80
movs   108736
ops    33376


haciendo que los movimientos verticales dependan del bando para no duplicar piezas
actual 100 turnos                         - 15    14   15   16  15  14 10 13 11
normal 80
movs   107968
ops    16688

hacerlo branchless
actual 100 turnos                         - 13    15   14   16  15  13 11 13 12
normal 80
movs   107968
ops    16688

cambiar el calculo de posiciones para guardar posAct en vez de offsetAct
actual 100 turnos                         - 12    17   11   11  15  12 12 11 13
normal 80
movs   107968
ops    16688

hacer que la posicion se restaure en casos de varias cadenas adentro de desliz y exc. Va a hacer el programa mas lento pero es necesario para ser consistente
actual 100 turnos                         - 13    13   12   15  12  15 15 12 11
caballos peon 2000 turnos                 - 14    10    13   14   14   14 14
test vel reina 1000                       - 109   76    77 178 110 102 111
normal 80
movs   108736
ops    16688

saltar reacciones en iteraciones y entre ramas aprovechando que la memoria es contigua y se tiene la pos de nh
actual 100 turnos                         - 12    14   15   11  10  14 13 14 15
caballos peon 2000 turnos                 - 15    11    13   10  13   10 15
test vel reina 1000                       - 83   82   70 59 67 85 62
normal 80
movs   108736
ops    16688



el problema de los operadores es que ligan flujo de datos con si las condiciones fallan o no, lo que en principio esta bueno porque en la mayoria de los casos es lo que se quiere, pero si se necesita la otra cosa no se puede. No sé si desligar las cosas o agregar alguna notacion rara para manejar el segundo caso, creo que prefiero eso


desliz COND ACC end
=>
while COND
 ACC
end

exc COND1 ACC1 or COND2 ACC2 end
=>
if COND1
 ACC1
else if COND2
 ACC2
end

isol COND ACC end
=>
if COND
 ACC
 ROLLBACK
end

desopt COND1 ACC1 or COND2 ACC2 end
=>
if COND1
 ACC1
 RECUR
 ROLLBACK
end
if COND2
 ACC2
 RECUR
 ROLLBACK
end

tambien hay cosas raras como que las condiciones tienen efecto, por lo que por ejemplo ramas anteriores de un exc tienen un impacto en la actual, y las condiciones no son conmutativas. Esto por ahí podría arreglarse haciendo que las condiciones con efecto corran despues de las sin efecto, aunque puede que esto haga todo mas confuso, no sé. Y hay condiciones sin efecto que dependen de condiciones con efecto, asi que no.
Igual creo que esto es relevante solo en contextos raros, y con una notacion que marque bien las cosas no debería importar mucho;
exc y desliz cuando fallan resetean la posicion pero no resetean la memoria local, lo que por ahí es raro. Se podría agregar eso, sería mas ineficiente porque tengo que guardar la memoria local pero bueno, hace el lenguaje mas consistente y saca este caso raro de tener ramas anteriores fallidas del exc/ultima iteracion del desliz con potencial de tener efecto. En la version compilada no importa porque solo se agregaria este codigo cuando se necesite de verdad, que es casi nunca.
Otro tema es que solo se resetearia la memoria reseteable, por lo que la funcionalidad anterior va a seguir estando en el area no reseteable se quiera o no.

Otro tema raro son cadenas cortables. desliz A c B end corre hasta que falle A o B, si falla B queda media iteracion al final.
en exc A c B or [] end si falla B se toma esa rama como valida igual, lo que supongo que es lo que se quiere. 



Supongamos que tengo

desliz exc A or B false end C end

La rama B parece no tener sentido, y no lo tiene, a menos que haga algo con efecto como actualizar memoria local (por ahora toda, puede que despues solo deje la memoria local no reseteable), o tener un isol o c.
El desliz solo iteraria por A y C hasta que caiga B, y ahí corta. 
Igual esto puede reescribirse como

desliz mset l0 1 A mset l0 0 C end exc mmcmp l0 1 B end 
desliz l0<=1 A l0<=0 C end exc l0==1 B end

lo que es mas entendible y sería preferible. Notece que para que esto funcione desliz NO tiene que resetear la memoria local, y me parece que tiene sentido y debería ser asi. No sé si opino lo mismo con exc, pero para mantener consistencia quedaría. 
Exc es raro porque uno no piensa que las ramas se ejecutan secuencialmente, pero bueno. Mas adelante pensaba tener calculos de memoria temporal, que en muchos casos sacan la necesidad de actualizar memoria local.

El segundo caso tambien permite que B pueda tener acciones comunes, sin necesidad de poner un c


Igual para manejar el primer caso podría agregar un comando especial fail, que retorne falso pero en una nueva cadena, manteniendo la validez de la anterior (como tener c pero sin hacer un clicker).
Entonces tendría

desliz exc A or B fail end C end
fail marcaría a exc como valido hasta la mitad, por la rama 2. Si hubiera una rama 3 no correría, tampoco corre C (creo, si no es asi lo cambiaría). Para casos de operadores anidados si se usarían flags, y como aca tambien por ahora no vale la pena agregarlo.







Ahora el problema esta con un caso parecido en desopt

desopt exc A or B end or [] end

quiero correr B solo si A falla, pero quiero que si corro B no se vuelva a iterar. Podría hacer:
desopt exc A or B false end or [] end
pero eso solo funciona si B hace algo como escribir memoria local, tener un isol o c. Si solo quiero agregar acciones comunes que vengan de B no puedo.

Usando flags podría hacer
desopt l0==0 exc A or l0<=1 end or l0==0 [] end
lo que funcionaría, la proxima iteracion pasa pero la bloqueo en todas las ramas.

Igual me parece que vale la pena agregar algun operador, no tan general como un break, que frene la iteracion del desopt actual.
Lo que pasa con desopt es que no puedo correr codigo despues de él, en el caso del desliz puedo poner codigo despues y listo. Tambien esta el tema de si este codigo debería correr despues de todas las ramas o algunas

usando esto quedaría 

desopt exc A or B destop end or [] end
desopt A desoptEnd B end or [] end

lo que es util porque da una forma de tener codigo que finalice en desopt, lo que no es un caso muy raro. De paso es eficiente porque no tengo que hacer una iteracion mas
La segunda opcion es mas facil de implementar pero me gusta mas la primera porque agrega un comando en vez de un operador, y es mas poderosa porque puede estar adentro de una anidacion de operadores.
(el comando no cambia el flujo, nomas setea un flag que se mira antes de iterar)


Otra alternativa sería

desopt exc A or B fail end or [] end

que hace lo que quiero hacer sin necesidad de agregar mecanicas nuevas, y es eficiente. Asi que voy a usar este. Hace algunas cosas de desliz un poco mas comodas, y eso se marca mas con desopt. Igual no es algo absolutamente necesario, pero lo vale.

--

Podría agregarse un operador break para tener mas control sobre el flujo. Hasta ahora no lo necesite pero podría ser util, por ejemplo:
desliz A exc B break or C end D end E

Pero puede verse que este caso es cubierto reemplazando break por fail, o reescribiendo
desliz A n(B) C D end E


Por ahí sería util para saltar de un nido de operadores, pero para eso necesitaría un mecanismo propio que sepa a donde ir y deje a todos los operadores intermedios en un estado de "contiene cosas validas pero no hasta el final". Creo que se puede hacer pero hasta ahora no lo necesite y es un quilombo y se pueden manejar con flags. No creo que valga la pena, me parece mejor idea mover todo a flags y no tener casos raros en el lenguaje.


---

Un caso que quería analizar es poder correr codigo cuando todos las ramas de un desopt fallen. Si el codigo puede correrse mas veces de las necesarias se puede poner en todas las ramas, incluso solo en una, usando exc y fail. Pero digamos que por eficiencia, o porque el codigo necesita solo correr cuando fallen todas las ramas, se tiene que hacer bien. 
No creo que valga la pena agregar algo especial al lenguaje para este caso, pero quiero ver que tan complejo es manejarlo.

desopt A or B or C end

usando memoria no reseteable

mset l0 10 desopt madd l0 1 A or B or madd l0 -1 C end

l0 es el index de un array de bools que indica si alguna rama de el nivel l0 fue valida 

desopt madd l0 1 A mset ll0 1 or B mset ll0 1 or madd l0 -1 exc C or exc mcmp ll0 1 madd l0 -1 or madd l0 -1 D fail end end end 

donde D es el codigo que corre cuando fallen todas las ramas. No es horrible, y en muchos casos no se necesita porque se puede hacer alguna comparacion que tengan que ver con el dominio para ahorrar casos.

Igual si se necesita mucha dependendia entre las ramas se puede pensar de implementar el desopt con desliz y isol y muchas operaciones de memoria


---










